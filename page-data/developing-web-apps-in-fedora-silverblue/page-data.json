{"componentChunkName":"component---src-templates-blog-post-js","path":"/developing-web-apps-in-fedora-silverblue/","result":{"data":{"markdownRemark":{"html":"<h3>Setting up Node.js</h3>\n<p>First we'll create a toolbox called <code>node</code>.</p>\n<p>Toolboxes are a feature in fedora silverblue to run software in isolation, you can setup an entire dev environment in a toolbox and not have any of the software be a part of your main OS.</p>\n<pre><code class=\"language-sh\">toolbox create -c node\n</code></pre>\n<p>Next, we'll install a Node Version Mananger.</p>\n<p>I like <a href=\"https://github.com/tj/n\">n</a> because it keeps things simple, no subshells, profile setup, or convoluted APIs.</p>\n<pre><code class=\"language-sh\">curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n\nbash n lts\nrm n\n</code></pre>\n<p>We've just installed the LTS version of Node.js using n, but before we're finished, we'll need to add <code>node</code> to our path and have n install newer node versions locally.</p>\n<p>open up your <code>.bashrc</code> and add this line.</p>\n<pre><code class=\"language-sh\"># if $HOME/.n/bin is not in our path, set it\nif ! [[ \"$PATH\" =~ \"$HOME/.n/bin\" ]]; then\n    PATH=\"$PATH:$HOME/.n/bin\"\nfi\n\n# if N_PREFIX is not defined, set it\nif [[ ! -v N_PREFIX ]]; then\n  N_PREFIX=\"$HOME/.n\"\n\n  export N_PREFIX\nfi\n</code></pre>\n<p>if you type <code>node -v</code> now you should see a version number print out.</p>\n<p>we'll install <code>n</code> as a npm package now, so we can update it periodically from npm.</p>\n<pre><code class=\"language-sh\">npm install -g n\n</code></pre>\n<p>For Node.js to do file watching we need to bump up <code>fs.inotify.max_user_watches</code>. Without it, we might see errors like</p>\n<pre><code>Error: ENOSPC: System limit for number of file watchers reached\n</code></pre>\n<pre><code class=\"language-sh\">sudo sysctl fs.inotify.max_user_watches=524288\nsudo sysctl -p --system\n</code></pre>\n<h3>VSCode Related setup</h3>\n<p>first, create a new file called <code>vscode-podman</code> and paste the contents below.</p>\n<pre><code class=\"language-sh\">#!/usr/bin/env sh\nexec flatpak-spawn --host podman \"$@\"\n</code></pre>\n<p>move it to <code>~/.local/bin</code></p>\n<p>Next, Go to VSCode settings, to the Remote-Containers section, and update the remote.containers.dockerPath with the absolute path to our script.</p>\n<blockquote>\n<p><strong>IMPORTANT</strong> It must be the absolute path, e.g. <code>/var/home/&#x3C;user>/.local/bin/vscode-podman</code></p>\n</blockquote>\n<p>The next steps will setup VSCode Container settings.</p>\n<p>You can either run the script below to setup a toolbox called \"node\" if your container is named something else, go ahead and put it where \"node\" is in this command.</p>\n<pre><code class=\"language-sh\">wget -O - -o /dev/null \"https://gist.githubusercontent.com/lifeiscontent/6a3d156b070cfdc505616fb49090b089/raw/9aecd3475996de0a603430441074a7c5d2af6b8e/vscode-toolbox-setup.sh\" | bash -s node\n</code></pre>\n<p>if you're uncomfortable with running scripts from the internet, that's fine, and I'll now explain everything that happens here.</p>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\n# we check to see that \"node\" was sent in to the script\n# otherwise we print a helpful message to tell you how to use it\nif [ -n \"$1\" ]; then\n  # we create a toolbox, if its already created this is a no-op\n\n  toolbox create \"$1\" >/dev/null 2>&#x26;1\n  # we then add a JSON file to let the flatpak version of VSCode\n  # know about the toolbox we've created.\n  wget -O - -o /dev/null \"https://gist.githubusercontent.com/lifeiscontent/f977025b47763ff74393350ea97039ea/raw/b1b68577aea85846c021957de33e19606612dd1a/nameConfig.json >> ~/.var/app/com.visualstudio.code/config/Code/User/globalStorage/ms-vscode-remote.remote-containers/nameConfigs/$1.json\"\n\n  # in order to allow VSCode to install runtime dependencies we need to\n  # change permissions to the toolbox folders\n  toolbox run -c \"$1\" sudo chmod 755 /root &#x26;&#x26; sudo mkdir -p -m0777 /root/.vscode-server >/dev/null 2>&#x26;1\n\n  # we're done!\n  echo \"All done, now run Remote-Containers: Attach to Running Container... from VSCode\"\nelse\n  echo \"Usage: $0 [TOOLBOX_NAME]\"\nfi\n</code></pre>","frontmatter":{"title":"Developing Web Apps in Fedora Silverblue","date":"2021-01-28T00:00:00.000Z","tags":["Linux","Fedora Silverblue","Node.js"]}}},"pageContext":{"slug":"/developing-web-apps-in-fedora-silverblue/"}},"staticQueryHashes":["1612771227"]}