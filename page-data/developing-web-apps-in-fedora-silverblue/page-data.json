{"componentChunkName":"component---src-templates-blog-post-js","path":"/developing-web-apps-in-fedora-silverblue/","result":{"data":{"markdownRemark":{"html":"<h3>Setting up Node.js</h3>\n<p>First we'll create a toolbox called <code>node</code>.</p>\n<p>Toolboxes are a feature in fedora silverblue to run software in isolation, you can setup an entire dev environment in a toolbox and not have any of the software be a part of your main OS.</p>\n<pre><code class=\"language-sh\">toolbox create -c node\n</code></pre>\n<p>Next, we'll install a Node Version Mananger.</p>\n<p>I like <a href=\"https://github.com/tj/n\">n</a> because it keeps things simple, no subshells, profile setup, or convoluted APIs.</p>\n<pre><code class=\"language-sh\">curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n\nbash n lts\nrm n\n</code></pre>\n<p>We've just installed the LTS version of Node.js using n, but before we're finished, we'll need to add <code>node</code> to our path.</p>\n<p>open up your <code>.bashrc</code> and add this line.</p>\n<pre><code class=\"language-sh\"># if $HOME/.n/bin is not in our path, set it\nif ! [[ \"$PATH\" =~ \"$HOME/.n/bin\" ]]; then\n    PATH=\"$PATH:$HOME/.n/bin\"\nfi\n</code></pre>\n<p>if you type <code>node -v</code> now you should see a version number print out.</p>\n<p>we'll install <code>n</code> as a npm package now, so we can update it periodically from npm.</p>\n<pre><code class=\"language-sh\">npm install -g n\n</code></pre>\n<p>For Node.js to do file watching we need to bump up <code>fs.inotify.max_user_watches</code>. Without it, we might see errors like</p>\n<pre><code>Error: ENOSPC: System limit for number of file watchers reached\n</code></pre>\n<pre><code class=\"language-sh\">sudo sysctl fs.inotify.max_user_watches=524288\nsudo sysctl -p --system\n</code></pre>\n<h3>VSCode Related settings</h3>\n<p>To fix the terminal in VSCode I had to set these settings.</p>\n<p>First, in my <code>.bashrc</code>:</p>\n<pre><code class=\"language-sh\"># if we're inside of VSCode flatpak, fix the terminal\nif [ \"$FLATPAK_ID\" == \"com.visualstudio.code\" ]; then\n    export PS1=\"[\\u@\\h \\W]\\\\$ \"\nfi\n\n# a helper function to launch VSCode from a toolbox or main OS.\ncode() {\n  if [[ ! -f /run/.toolboxenv ]]; then\n    flatpak run com.visualstudio.code $@\n  elif [[ -f /run/.toolboxenv ]]; then\n    flatpak-spawn --host flatpak run com.visualstudio.code $@\n  else\n    echo \"unknown environment\"\n  fi\n}\n</code></pre>\n<p>in VSCode, we have to set these settings to get the terminal to work through our toolbox.</p>\n<pre><code class=\"language-json\">{\n  \"terminal.integrated.shell.linux\": \"flatpak-spawn\",\n  \"terminal.integrated.shellArgs.linux\": [\"--host\", \"toolbox\", \"enter\", \"node\"]\n}\n</code></pre>","frontmatter":{"title":"Developing Web Apps in Fedora Silverblue","date":"2021-01-28T00:00:00.000Z","tags":["Linux","Fedora Silverblue","Node.js"]}}},"pageContext":{"slug":"/developing-web-apps-in-fedora-silverblue/"}},"staticQueryHashes":["1612771227"]}